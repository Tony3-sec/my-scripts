#!/usr/bin/env python

'''
This script will XOR the data. 
The key and the payload must be in hex format
Simplified the code from my_xor.py
'''

import binascii

enc = "2f21077b4c3e52242c3850450904680377761c73711a0470756d0b04061f77007b6b00716f000f6d70700b1b05037f1c76711c7774033b4b242855505a502b577f6a5732221b4e393a39434d181e3e4a3a4838342c525f2d277c16415941691c31365a77731819352f31161b47422e007145"
key = "42423246413336414141393534314630"

#enc = "4c505d207156514c5159545142594c5d5c2076717b2051565e574a55594c515756020a0a66666666666666666c505d200920795c59484c5d4a66666666666666666666660a795c59484c5d4a207659555d022031437908010e7e087e0b15387a0c7e150c0d7d0e157938387b157b01087b0d7e0d010b327b08450a795c59484c5d4a207c5d4b5b02203171564c5d54106a1120686a77170908080820756c20765d4c4f574a53207b5756565d5b4c5157560a75797b20795c5c4a022031080815085b153201150859155c0f155c5a0a716820795c5c4a5d4b4b022031090f3216090f1632011632080f0a71682075594b53022031320d0d16320d0d16320c0816080a7f594c5d4f5941022031090f3216090f160b08160932090a7c707b68207c514b595a545d5c350a70594e5d206f51564b022076570a1717171717171717171717171717171717171717171717171717171717171717171717171717171717171717171717171717171717171717171717171717171717171717171717171717171717171717171717170a0a0a6c51555d023208090e153815320c140908020908020d0c0a6c514c545d027b57555559565c20684a5755484c0a7d405d027b02646f51565c574f4b646b414b4c5d550b32645b555c165d405d0a636d7e65637a7365636d7e65636d7e65637e090965637a7365637a7365637a7365637a7365637a7365637a7365637a7365765d4a637a73654c5d57637a7365637a73654f4a57534b5d4a4e515b5d637d7665636d7e65636d7e65637d7665636d7e65637d766554575e637a73655f575e5e637d7665"
#key = "38"

#enc = "f1fcf5f5f6b9eef6ebf5fd"
#key = "9930"

#enc = "796f757220495020616464726573732069733a203139322e3136382e31302e3120686f73746e616d652069732057494e2d484f47455f6675"
#enc = "f02a1dfb6521d96509ed211aec361ba92c1bb36559b07746b87350a77458a77448e12a1bfd2b09e42048e03648de0c26a40d27ce0037ef30"
#key = "894568"
dec = ""

n = 2

## if key is single byte
if ( (len(key) / 2) == 1):
	m = 0
	for i in range(0, len(enc), n):
		dec += hex(int(enc[i:i+n], 16) ^ int(key[m:m+n], 16)).replace('0x', '').zfill(2)
else:
	m = 0
	for i in range(0, len(enc), n):
		dec += hex(int(enc[i:i+n], 16) ^ int(key[m:m+n], 16)).replace('0x', '').zfill(2)
		m += n
		## if the key gets to end, set the key back to beginning.
		if (m >= len(key)):
			m = 0

print(dec)
#dec = dec.replace('0d0d', '0d0a') ## not sure why but when hex contains '0d0d' it doesn't print properly so replacing to '0d0a'
#print(binascii.unhexlify(dec))
print(repr(binascii.unhexlify(dec)))
print("")